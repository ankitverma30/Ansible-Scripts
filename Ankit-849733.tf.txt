#Create a template for running a simple two-tier architecture on Amazon Web services.
#The premise is that you have stateless app servers running behind an ELB serving traffic.

#since we are using AWS provider 

provider "aws"{

access_key="AKIA53LUW4LEYSSCJ"
secret_key="OU3NCQ3sW7D0Uo3PkZyctuFn0DYGxoXI"
region="us-east-1"	

}

resource "aws_instance" "myexample"{

ami="ami-b374d5a5"

instance_type="t2.micro"

}


data "template_file" "init-script" {

  template = "${file("scripts/init.cfg")}"
  
vars {

    REGION = "${var.region}"

  }

}

data "template_file" "shell-script" {

  template = "${file("scripts/volumes.sh")}"

  vars {

    DEVICE = "${var.INSTANCE_DEVICE_NAME}"

  }

}

data "template_cloudinit_config" "cloudinit-example" {

  gzip = false

  base64_encode = false

  part {

    filename     = "init.cfg"

    content_type = "text/cloud-config"

    content      = "${data.template_file.init-script.rendered}"

  }

variable "region"{}

variable "web_server_ami"{

default="ami-b374d5a5"

}

default='ami-b3745a5'    

resource "aws_launch_configuration" "launchconfig" {

  name_prefix          = "launchconfig"

  image_id             = "${lookup(var.AMIS, var.AWS_REGION)}"

  instance_type        = "t2.micro"

  key_name             = "${aws_key_pair.mykeypair.key_name}"

  security_groups      = ["${aws_security_group.cogniinstance.id}"]

  user_data            = " /var/www/html/index.html"

  lifecycle              { create_before_destroy = true }

}

resource "aws_autoscaling_group" "cogni-autoscaling" {

  name                 = "cogni-autoscaling"

  vpc_zone_identifier  = ["${aws_subnet.main-public-1.id}"]

  launch_configuration = "${aws_launch_configuration.name}"

  min_size             = 2

  max_size             = 2

  health_check_grace_period = 300

  health_check_type = "ELB"

  load_balancers = ["${aws_elb.my-elb.name}"]

  force_delete = true

  tag {

      key = "Name"

      value = "ec2 instance"

      propagate_at_launch = true


  }

}

resource "aws_elb" "cogni-elb" {

  name = "cogni-elb"

  subnets = ["${aws_subnet.main-public-1.id}", "$"]

  security_groups = ["${aws_securit_group}"]

 listener {

    instance_port = 80

    instance_protocol = "http"

    lb_port = 80

    lb_protocol = "http"

  }

  cross_zone_load_balancing = true

  connection_draining = true

  connection_draining_timeout = 400

  tags {

    Name = "cogni-elb"

  }

}

#setting the kley variable

resource "aws_key_pair" "mykeypair" {

  key_name = "mykeypair"

  public_key = "$PATH"}"

  lifecycle {

    ignore_changes = ["public_key"]

  }

}

#setting the security instance


resource "aws_security_group" "elb-securitygroup" {

  vpc_id = "${aws_vpc.main.id}"

  name = "elb"

  description = "security group for load balancer"

  egress {

      from_port = 0

      to_port = 0

      protocol = "-1"

      cidr_blocks = ["0.0.0.0/0"]

  }

  ingress {
      from_port = 80

      to_port = 80

      protocol = "tcp"

      cidr_blocks = ["0.0.0.0/0"]

  } 

  tags {

    Name = "elb"

  }

}

# Internet VPC

resource "aws_vpc" "main" {

    cidr_block = "10.0.0.0/16"

    instance_tenancy = "default"

    enable_dns_support = "true"

    enable_dns_hostnames = "true"


    enable_classiclink = "false"

    tags {

        Name = "main"

    }
}



# route tables
resource "aws_route_table" "main-public" {

    vpc_id = "${aws_vpc.main.id}"
  
  route {

        cidr_block = "0.0.0.0/0"

        gateway_id = "${aws_internet_gateway.main-gw.id}"

 
  }

    tags {
        Name = "main-public-1"
    }
#setting the output variable

output "ELB" {

	value = "${aws_elb.cogni-elb.dns_name}"
}
